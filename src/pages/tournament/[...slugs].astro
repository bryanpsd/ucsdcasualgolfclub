---
import { contentfulClient } from "../../lib/contentful";
import { subPageWrapper } from "~styles/common.css";
import Layout from "../../layouts/Layout.astro";
import { closestTo, format } from "date-fns";
import type {
  TypeCourseSkeleton,
  TypeCourseProps,
} from "~types/contentful/TypeCourse";
import { MiniCard } from "~components/Course/MiniCard";
import { Map } from "~components/Course/Map";

import * as styles from "./_style/tournament.css";
import { RichText } from "~components/RichText";
import FlightCard from "./_components/FlightCard/FlightCard.astro";
import { Hero } from "~components/Hero";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
    content_type: "course",
    include: 10,
  });

  const pages = entries.items
    .flatMap((item) => {
      return item.fields.tournaments?.map((tournament) => {
        if (tournament && "fields" in tournament && tournament.fields.date) {
          const year = new Date(tournament.fields.date).getFullYear(); // Extract year from tournament date
          return {
            params: {
              slugs: `/${year}/${item.fields.slug}`, // Combine "tournament", year, and course slug
            },
            props: {
              ...item.fields,
              address: item.fields.address,
              summary: item.fields.summary,
              courseWebsite: item.fields.courseSite,
              courseImage:
                item.fields.courseImage && "fields" in item.fields.courseImage
                  ? (item.fields.courseImage.fields.file?.url ?? "")
                  : undefined,
              tournaments: item.fields.tournaments?.map((tournament) => {
                if (tournament && "fields" in tournament) {
                  return {
                    ...(typeof tournament.fields === "object" &&
                    tournament.fields !== null
                      ? tournament.fields
                      : {}),
                    results: (tournament.fields as Record<string, any>).results,
                    players: tournament.fields.players,
                    date: format(
                      new Date(tournament.fields.date),
                      "dd/MM/yyyy"
                    ),
                  };
                }
                return null;
              }),
            },
          };
        }
        return null;
      });
    })
    .filter(Boolean); // Remove null values

  console.log("Generated Paths:", pages); // Log all generated paths for debugging

  return pages; // Return an array of paths
}

const { course, courseImage, summary, address, tournaments, courseWebsite } =
  Astro.props;
---

<Layout>
  <Hero course={course} courseImage={courseImage} />
  <section class={subPageWrapper}>
    <div class={styles.tournamentWrapper}>
      <div class={styles.tournamentLeftCol}>
        {
          address?.lon !== undefined && address.lat !== undefined ? (
            <Map longitude={address.lon} latitude={address.lat} />
          ) : (
            <p>Location data is unavailable.</p>
          )
        }
        {summary !== undefined && <RichText richText={summary} />}
      </div>
      <div class={styles.tournamentRightCol}>
        <MiniCard
          title="Information"
          isCoursePage
          label="Course Website"
          course={course}
          date={tournaments}
        />
      </div>
    </div>
  </section>
</Layout>
