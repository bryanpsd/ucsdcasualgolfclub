---
import { contentfulClient } from '../../lib/contentful';
import { subPageWrapper } from '~styles/common.css';
import Layout from '../../layouts/Layout.astro';
import { format } from 'date-fns';
import type {
  TypeCourseSkeleton,
  TypeCourseProps,
} from '~types/contentful/TypeCourse';
import { MiniCard } from '~components/Course/MiniCard';
import { Map } from '~components/Course/Map';

import * as styles from './_style/tournament.css';
import { RichText } from '~components/RichText';
import FlightCard from './_components/FlightCard/FlightCard.astro';
import { Hero } from '~components/Hero';
import { date } from 'astro:schema';

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
    content_type: 'course',
    include: 1,
  });

  const pages = entries.items
    .flatMap((item) => {
      return item.fields.tournaments?.map((tournament) => {
        if (tournament && 'fields' in tournament && tournament.fields.date) {
          const year = new Date(tournament.fields.date).getFullYear(); // Extract year from tournament date

          return {
            params: {
              slugs: `/${year}/${item.fields.slug}`, // Combine "tournament", year, and course slug
            },
            props: {
              ...item.fields,
              address: item.fields.address,
              summary: item.fields.summary,
              courseWebsite: item.fields.courseSite,
              courseImage:
                item.fields.courseImage && 'fields' in item.fields.courseImage
                  ? (item.fields.courseImage.fields.file?.url ?? '')
                  : undefined,
              tournament: {
                price: tournament.fields.price ?? 'N/A', // Include price
                date: tournament.fields.date ?? 'N/A', // Include date
              },
            },
          };
        }

        return null;
      });
    })
    .filter(Boolean); // Remove null values

  return pages; // Return an array of paths
}

const { course, courseImage, summary, address, tournaments, courseWebsite } =
  Astro.props;

console.log(tournaments);
---

<Layout>
  <Hero course={course} courseImage={courseImage} />
  <section class={subPageWrapper}>
    <div class={styles.tournamentWrapper}>
      <div class={styles.tournamentLeftCol}>
        {
          address?.lon !== undefined && address.lat !== undefined ? (
            <Map longitude={address.lon} latitude={address.lat} />
          ) : (
            <p>Location data is unavailable.</p>
          )
        }
        {summary !== undefined && <RichText richText={summary} />}
      </div>
      <div class={styles.tournamentRightCol}>
        {
          tournaments?.map((tournament) => (
            <MiniCard
              title="Information"
              isCoursePage
              label="Course Website"
              course={course}
              price={'fields' in tournament ? tournament.fields.price : 'N/A'}
            />
          ))
        }
      </div>
    </div>
  </section>
</Layout>
