---
export const prerender = true

import { CourseCard } from '~components/Course/CourseCard'
import { contentfulClient } from '../../lib/contentful'
import type { TypeCourseSkeleton } from '~types/contentful/TypeCourse'

import Layout from '../../layouts/Layout.astro'
import { Hero } from '~components/Hero'
import SeasonRecap from './_components/SeasonRecap.astro'

import * as styles from '~styles/common.css'

export function getStaticPaths() {
  const getYear = new Date().getFullYear() - 1
  const pastSeasonsLinks = Array.from({ length: getYear - 2018 }, (_, i) => {
    const year = getYear - i
    return {
      params: {
        slug: year.toString(),
      },
    }
  })
  return pastSeasonsLinks
}

const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
  content_type: 'course',
})

const { slug } = Astro.params
---

<Layout
  title={`${slug} Season | UCSD Casual Golf Club`}
  description={`Explore the ${slug} season of the UCSD Casual Golf Club. View tournaments, results, and highlights from the year.`}
>
  <Hero title={`${slug} Season`} />
  <div class={styles.subPageWrapper}>
    <SeasonRecap year={slug} />
    {
      entries.items
        .flatMap((item) => {
          return item.fields.tournaments
            ?.filter((tournament) => {
              if ('fields' in tournament && tournament.fields.date) {
                const tournamentYear = new Date(tournament.fields.date).getFullYear()
                return tournamentYear.toString() === slug
              }
              return false
            })
            .map((tournament) => ({
              tournament: {
                fields: {
                  ...('fields' in tournament ? tournament.fields : {}),
                  date: 'fields' in tournament ? tournament.fields.date : undefined,
                  clubChampionship:
                    'fields' in tournament ? (tournament.fields.clubChampionship ?? false) : false,
                },
              },
              course: item.fields.course,
              slug: item.fields.slug,
            }))
        })
        .filter(Boolean)
        .sort(
          (a, b) =>
            new Date(
              a?.tournament &&
              'fields' in a.tournament &&
              typeof a.tournament.fields.date === 'string'
                ? new Date(a.tournament.fields.date).getTime()
                : 0
            ).getTime() -
            new Date(
              b?.tournament &&
              'fields' in b.tournament &&
              typeof b.tournament.fields.date === 'string'
                ? new Date(b.tournament.fields.date).getTime()
                : 0
            ).getTime()
        )
        .map((item, index, array) => {
          if (item && item.tournament) {
            if (
              index === array.length - 1 &&
              'fields' in (array[index - 1]?.tournament ?? {}) &&
              array[index - 1]?.tournament.fields.clubChampionship === true
            ) {
              return null
            }

            const { tournament, course, slug } = item
            return (
              <CourseCard
                client:load
                hideCourseInfo
                date={'fields' in tournament ? tournament.fields.date : undefined}
                clubChampionship={
                  'fields' in tournament ? (tournament.fields.clubChampionship ?? false) : false
                }
                course={course}
                slug={slug}
                results={
                  'fields' in tournament &&
                  tournament.fields.results &&
                  'fields' in tournament.fields.results
                    ? tournament.fields.results.fields.file?.url
                    : undefined
                }
              />
            )
          }
          return null
        })
    }
  </div>
</Layout>
