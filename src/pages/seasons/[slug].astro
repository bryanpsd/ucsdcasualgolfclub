---
import { CourseCard } from "~components/Course/CourseCard";
import { contentfulClient } from "../../lib/contentful";
import { heroWrapper, subPageWrapper } from "~styles/common.css";
import Layout from "../../layouts/Layout.astro";
import { format } from "date-fns";
import type { TypeCourseSkeleton } from "~types/contentful/TypeCourse";
import { ResponsiveHeadline } from "~components/ResponsiveHeadline";

export function getStaticPaths() {
  // Generate dynamic pages for Seasons
  const getYear = new Date().getFullYear() - 1;
  const pastSeasonsLinks = Array.from({ length: getYear - 2018 }, (_, i) => {
    const year = getYear - i;
    return {
      params: {
        slug: year.toString(),
      },
    };
  });
  return pastSeasonsLinks;
}

const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
  content_type: "course",
});

const { slug } = Astro.params;
---

<Layout>
  <section class={heroWrapper}>
    <ResponsiveHeadline size={3} as="h1">{slug}</ResponsiveHeadline>
  </section>
  <div class={subPageWrapper}>
    {
      entries.items
        .flatMap((item) => {
          // Map through tournaments and filter by year matching the slug
          return item.fields.tournaments
            ?.filter((tournament) => {
              if ("fields" in tournament && tournament.fields.date) {
                const tournamentYear = new Date(
                  tournament.fields.date
                ).getFullYear();
                return tournamentYear.toString() === slug; // Match the year with the slug
              }
              return false;
            })
            .map((tournament) => ({
              tournament,
              course: item.fields.course,
              slug: item.fields.slug,
            }));
        })
        .filter(Boolean) // Remove null or undefined values
        .sort(
          (a, b) =>
            new Date(a.tournament.fields.date) -
            new Date(b.tournament.fields.date)
        ) // Sort by date ascending
        .map(({ tournament, course, slug }) => (
          <CourseCard
            client:load
            hideCourseInfo
            date={tournament.fields.date}
            clubChampionship={tournament.fields.clubChampionship ?? false}
            course={course}
            slug={slug}
            results={
              tournament.fields.results && "fields" in tournament.fields.results
                ? tournament.fields.results.fields.file?.url
                : undefined
            }
          />
        ))
    }
  </div>
</Layout>
