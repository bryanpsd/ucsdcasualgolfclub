---
import { contentfulClient } from "../../lib/contentful";
import { subPageWrapper } from "~styles/common.css";
import Layout from "../../layouts/Layout.astro";
import { format } from "date-fns";
import type { TypeCourseSkeleton } from "~types/contentful/TypeCourse";
import { MiniCard } from "~components/Course/MiniCard";
import { Map } from "~components/Course/Map";

import * as styles from "./_style/tournament.css";
import { RichText } from "~components/RichText";
import FlightCard from "./_components/FlightCard/FlightCard.astro";
import { Hero } from "~components/Hero";
import { Table } from "~components/Table";

export async function getStaticPaths() {
  const { items } = await contentfulClient.getEntries<TypeCourseSkeleton>({
    content_type: "course",
  });
  const pages = items.map((item) => ({
    params: {
      slug: `/${format(new Date((item.fields.date ?? "").toString()), "yyyy")}/${item.fields.slug}`,
    },
    props: {
      course: item.fields.course,
      date: item.fields.date,
      address: item.fields.address,
      longitude: item.fields.address?.lon,
      latitude: item.fields.address?.lat,
      summary: item.fields.summary,
      courseWebsite: item.fields.courseSite,
      courseImage:
        item.fields.courseImage && "fields" in item.fields.courseImage
          ? (item.fields.courseImage.fields.file?.url ?? "")
          : undefined,
      results: item.fields.results,
      firstFlight: item.fields.firstFlight?.map((player) => ({
        playerName: "fields" in player ? player.fields.playerName : undefined,
        handicapIndex:
          "fields" in player ? player.fields.handicapIndex : undefined,
      })),
      secondFlight: item.fields.secondFlight?.map((player) => ({
        playerName: "fields" in player ? player.fields.playerName : undefined,
        handicapIndex:
          "fields" in player ? player.fields.handicapIndex : undefined,
      })),
    },
  }));
  return pages;
}

const {
  course,
  courseImage,
  longitude,
  latitude,
  summary,
  date,
  courseWebsite,
  firstFlight,
  secondFlight,
  results,
} = Astro.props;
---

<Layout>
  <Hero course={course} courseImage={courseImage} />
  <section class={subPageWrapper}>
    <div class={styles.tournamentWrapper}>
      <div class={styles.tournamentLeftCol}>
        {
          longitude !== undefined && latitude !== undefined ? (
            <Map longitude={longitude} latitude={latitude} />
          ) : (
            <p>Location data is unavailable.</p>
          )
        }
        {summary !== undefined && <RichText richText={summary} />}
        {
          firstFlight && (
            <FlightCard title="First Flight" flight={firstFlight} />
          )
        }

        {
          secondFlight && (
            <div>
              <FlightCard title="First Flight" flight={secondFlight} />
            </div>
          )
        }
      </div>
      <div class={styles.tournamentRightCol}>
        <MiniCard
          title="Information"
          isCoursePage
          label="Course Website"
          course={course}
          date={date}
          results={results}
          courseWebsite={courseWebsite}
        />
      </div>
    </div>
  </section>
</Layout>
