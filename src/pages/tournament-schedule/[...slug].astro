---
import { contentfulClient } from '../../lib/contentful';
import { subPageWrapper } from '~styles/common.css';
import Layout from '../../layouts/Layout.astro';
import { closestTo, format } from 'date-fns';
import type {
  TypeCourseSkeleton,
  TypeCourseProps,
} from '~types/contentful/TypeCourse';
import { MiniCard } from '~components/Course/MiniCard';
import { Map } from '~components/Course/Map';

import * as styles from './_style/tournament.css';
import { RichText } from '~components/RichText';
import FlightCard from './_components/FlightCard/FlightCard.astro';
import { Hero } from '~components/Hero';
import type { Entry } from 'contentful';
import type { TypeResultsProps } from '~types/contentful/TypeResults';
import { Results } from '~components/Results';

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
    content_type: 'course',
    include: 10,
  });
  const pages = entries.items.map((item) => ({
    params: {
      slug: `/${format(new Date((item.fields.date ?? '').toString()), 'yyyy')}/${item.fields.slug}`,
    },
    props: {
      ...item.fields,
      course: item.fields.course,
      date: item.fields.date,
      address: item.fields.address,
      longitude: item.fields.address?.lon,
      latitude: item.fields.address?.lat,
      summary: item.fields.summary,
      courseWebsite: item.fields.courseSite,
      courseImage:
        item.fields.courseImage && 'fields' in item.fields.courseImage
          ? (item.fields.courseImage.fields.file?.url ?? '')
          : undefined,
      results: item.fields.results,
      firstFlight: item.fields.firstFlight?.map((player) => {
        if (player && 'fields' in player) {
          return {
            ...player.fields,
            results: player.fields.results?.map((result) => {
              if (result && 'fields' in result) {
                return {
                  ...result.fields,
                };
              }
            }),
          };
        }
      }),
      secondFlight: item.fields.secondFlight?.map((player) => {
        if (player && 'fields' in player) {
          return {
            ...player.fields,
            results: player.fields.results?.map((result) => {
              if (result && 'fields' in result) {
                return {
                  ...result.fields,
                };
              }
            }),
          };
        }
      }),
    },
  }));

  return pages;
}

const {
  course,
  courseImage,
  longitude,
  latitude,
  summary,
  date,
  courseWebsite,
  firstFlight,
  secondFlight,
  results,
} = Astro.props;
---

<Layout>
  <Hero course={course} courseImage={courseImage} />
  <section class={subPageWrapper}>
    <div class={styles.tournamentWrapper}>
      <div class={styles.tournamentLeftCol}>
        {
          longitude !== undefined && latitude !== undefined ? (
            <Map longitude={longitude} latitude={latitude} />
          ) : (
            <p>Location data is unavailable.</p>
          )
        }
        {summary !== undefined && <RichText richText={summary} />}

        {
          firstFlight && (
            <FlightCard
              course={course ?? ''}
              title="First Flight"
              flight={firstFlight.map((player) => ({
                playerName: player?.playerName,
                guest: player?.guest ? [player.guest[0]] : undefined,
                handicapIndex: player?.handicapIndex,
                results: player?.results?.map((result) => ({
                  title: result?.title,
                  gross: result?.gross,
                  courseHandicap: result?.courseHandicap,
                  net: result?.net,
                  course: result?.course as
                    | Entry<
                        TypeCourseSkeleton,
                        'WITHOUT_UNRESOLVABLE_LINKS',
                        'en-US'
                      >
                    | undefined,
                  longDrive: result?.longDrive,
                  putts: result?.putts,
                  closestTo: result?.closestTo,
                })),
              }))}
            />
          )
        }
        {
          secondFlight && (
            <FlightCard
              course={course ?? ''}
              title="Second Flight"
              flight={secondFlight.map((player) => ({
                playerName: player?.playerName,
                guest: player?.guest ? [player.guest[0]] : undefined,
                handicapIndex: player?.handicapIndex,
                results: player?.results?.map((result) => ({
                  title: result?.title,
                  gross: result?.gross,
                  courseHandicap: result?.courseHandicap,
                  net: result?.net,
                  course: result?.course as
                    | Entry<
                        TypeCourseSkeleton,
                        'WITHOUT_UNRESOLVABLE_LINKS',
                        'en-US'
                      >
                    | undefined,
                  longDrive: result?.longDrive,
                  putts: result?.putts,
                  closestTo: result?.closestTo,
                })),
              }))}
            />
          )
        }
      </div>
      <div class={styles.tournamentRightCol}>
        <MiniCard
          title="Information"
          isCoursePage
          label="Course Website"
          course={course}
          date={date}
          results={results}
          courseWebsite={courseWebsite}
        />
      </div>
    </div>
  </section>
</Layout>
