---
import { contentfulClient } from '../../lib/contentful';

import type { TypeRosterSkeleton } from '~types/contentful/TypeRoster';

import Layout from '../../layouts/Layout.astro';
import { Hero } from '~components/Hero';
import { Table } from '~components/Table';

import * as styles from '../../styles/common.css';

const entries = await contentfulClient.getEntries<TypeRosterSkeleton>({
  content_type: 'roster',
});

const rosterYears = Array.from(
  new Set(entries.items.map((item) => item.fields.year?.toString()))
).filter((year): year is string => Boolean(year));

const currentRosterPlayers = entries.items
  .filter((item) => item.fields.title?.includes('Current')) // Filter by title
  .flatMap((item) =>
    item.fields.players?.map((player) => {
      if (player && 'fields' in player) {
        return {
          playerName: player.fields.playerName,
          handicapIndex: player.fields.handicapIndex,
          guest: player.fields.guest,
        };
      }
      return null;
    })
  )
  .filter((player) => player !== null) // Remove null values
  .filter((player) => !player?.guest?.includes('Yes')) // Exclude guests
  .sort(
    (a, b) => (a?.handicapIndex ?? Infinity) - (b?.handicapIndex ?? Infinity)
  );

const lastUpdated = entries.items
  .map((item) => new Date(item.sys.updatedAt))
  .sort((a, b) => b.getTime() - a.getTime())[0]
  ?.toLocaleDateString('en-US', {
    year: '2-digit',
    month: '2-digit',
    day: '2-digit',
  });
---

<Layout title="Roster" description="Roster">
  <Hero title="Roster" />
  <div class={styles.subPageWrapper}>
    <Table
      thead={['Player', `Index (as of: ${lastUpdated ?? 'Unknown'})`]}
      tbody={currentRosterPlayers.map((player) => [
        player?.playerName ?? 'Unknown',
        player?.handicapIndex === undefined
          ? 'NH'
          : String(player.handicapIndex),
      ])}
    />
  </div>
</Layout>
