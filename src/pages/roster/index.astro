---
import "~/styles/globals/global.css";
import "~/styles/globals/reset.css";
import "~/styles/globals/theme.css";

import { Hero } from "~components/Hero";
import { Table } from "~components/Table";

import Layout from "~layouts/Layout.astro";
import { contentfulClient } from "~services/contentful/contentful";
import * as commonStyles from "~styles/globals/common.css";
import type { TypeRosterSkeleton } from "~types/contentful/TypeRoster";
import * as styles from "./_style/roster.css";

const entries = await contentfulClient.getEntries<TypeRosterSkeleton>({
	content_type: "roster",
});

// const rosterYears = Array.from(
//   new Set(entries.items.map((item) => item.fields.year?.toString()))
// ).filter((year): year is string => Boolean(year))

const currentRosterPlayers = entries.items
	.filter((item) => item.fields.title?.includes("Current")) // Filter by title
	.flatMap((item) =>
		item.fields.players?.map((player) => {
			if (player && "fields" in player) {
				return {
					playerName: player.fields.playerName,
					handicapIndex: player.fields.handicapIndex,
					guest: player.fields.guest,
				};
			}
			return null;
		}),
	)
	.filter((player) => player !== null) // Remove null values
	.filter((player) => !player?.guest?.includes("Yes")) // Exclude guests
	.sort((a, b) => (a?.handicapIndex ?? Infinity) - (b?.handicapIndex ?? Infinity));

const lastUpdated = entries.items
	.map((item) => new Date(item.sys.updatedAt))
	.sort((a, b) => b.getTime() - a.getTime())[0]
	?.toLocaleDateString("en-US", {
		year: "2-digit",
		month: "2-digit",
		day: "2-digit",
	});
---

<Layout
	title="Club Roster | UCSD Casual Golf Club Members List"
	description="Meet the members of the UCSD Casual Golf Club. View our roster and connect with fellow San Diego golf enthusiasts."
>
  <Hero title="UCSD Casual Golf Club Roster" />
  <div class={commonStyles.subPageWrapper}>
    <div style="overflow-x: auto;">
      <Table
        client:load
        thead={['Player', `Index (as of: ${lastUpdated ?? 'Unknown'})`]}
        tbody={currentRosterPlayers.map((player) => [
          player?.playerName
            ? `<a href="/results?playerName=${encodeURIComponent(player.playerName)}" class="${styles.rosterLink}">${player.playerName}</a>`
            : 'Unknown',
          player?.handicapIndex === undefined
            ? 'NH'
            : String(player.handicapIndex),
        ])}
      />
    </div>
  </div>
</Layout>
