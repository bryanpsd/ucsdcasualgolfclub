---
import { contentfulClient } from "../../lib/contentful";
import type { TypeRosterSkeleton } from "../../types/contentful/TypeRoster";

import Layout from "../../layouts/Layout.astro";
import { Hero } from "~components/Hero";
import { Table } from "~components/Table";

import * as styles from "~styles/common.css";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<TypeRosterSkeleton>({
    content_type: "roster",
  });

  const pages = entries.items.map((item) => {
    return {
      params: {
        year: item.fields.year?.toString(),
      },
      props: {
        year: item.fields.year ?? "N/A",
        players:
          item.fields.players
            ?.map((player) => {
              if (player && "fields" in player) {
                return {
                  playerName: player.fields.playerName,
                  handicapIndex: player.fields.handicapIndex,
                  guest: player.fields.guest,
                };
              }
              return null;
            })
            .filter(Boolean) ?? [],
      },
    };
  });

  return pages;
}

const { year, players = [] } = Astro.props;
---

<Layout>
  <Hero title={`${year} Roster`} />
  <div class={styles.subPageWrapper}>
    <Table
      thead={["Player", "Index"]}
      tbody={players
        .map((player) => {
          return player?.guest?.includes("Yes")
            ? null
            : [
                player?.playerName,
                player?.handicapIndex === undefined
                  ? "NH"
                  : String(player.handicapIndex),
              ];
        })
        .filter((row) => row !== null) as string[][]}
    />
  </div>
</Layout>
