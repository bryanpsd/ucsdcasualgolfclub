---
export const prerender = true

import { contentfulClient } from '../../services/contentful/contentful'

import Layout from '../../layouts/Layout.astro'
import type { TypeCourseSkeleton } from '~types/contentful/TypeCourse'
import { MiniCard } from '~components/Course/MiniCard'
import { Map } from '~components/Course/Map'

import { RichText } from '~components/RichText'
import FlightCard from './_components/FlightCard/FlightCard.astro'
import { Hero } from '~components/Hero'

import { CourseInfo } from '~components/Course/CourseInfo'

import * as commonStyles from '~styles/common.css'
import * as styles from './_style/tournament.css'

import { Scorecard } from '~components/Course/Scorecard'

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
    content_type: 'course',
    include: 3,
  })

  const pages = entries.items
    .flatMap((item) => {
      return item.fields.tournaments?.map((tournament) => {
        if (tournament && 'fields' in tournament && tournament.fields.date) {
          const year = new Date(tournament.fields.date).getFullYear()

          return {
            params: {
              slugs: `/${year}/${item.fields.slug}`,
            },
            props: {
              ...item.fields,
              address: item.fields.address,
              summary: item.fields.summary,
              courseWebsite: item.fields.courseSite,
              coursePar: item.fields.coursePar,
              courseScorecard: item.fields.courseScorecard,
              courseImage:
                item.fields.courseImage && 'fields' in item.fields.courseImage
                  ? (item.fields.courseImage.fields.file?.url ?? '')
                  : undefined,
              tournaments: [
                {
                  clubChampionship:
                    'fields' in tournament ? (tournament.fields.clubChampionship ?? false) : false,
                  prices: tournament.fields.prices,
                  date: tournament.fields.date ?? 'N/A',
                  players: tournament.fields.players,
                  inclusions: tournament.fields.inclusions ?? [],
                  results: tournament.fields.results ?? [],
                  tees: tournament.fields.tees,
                  type: tournament.fields.type,
                  tournamentNotes: tournament.fields.tournamentNotes,
                  firstFlight:
                    tournament.fields.firstFlight
                      ?.map((player) => {
                        if (player && 'fields' in player) {
                          return {
                            playerName: player.fields.playerName,
                            handicapIndex: player.fields.handicapIndex,
                            guest: player.fields.guest,
                            results: player.fields.results?.map((result) => {
                              if (result && 'fields' in result) {
                                return {
                                  ...result.fields,
                                  index: result.fields.index,
                                  date: result.fields.date,
                                  courseHandicap: result.fields.courseHandicap,
                                  gross: result.fields.gross,
                                  net: result.fields.net,
                                  course: result.fields.course,
                                  longDrive: result.fields.longDrive,
                                  putts: result.fields.putts,
                                  closestTo: result.fields.closestTo,
                                }
                              }
                            }),
                            yearlyStats: player.fields.yearlyStats?.map((stats) => {
                              if (stats && 'fields' in stats) {
                                return {
                                  ...stats.fields,
                                  year: stats.fields.year,
                                  gross: stats.fields.gross,
                                  net: stats.fields.net,
                                }
                              }
                            }),
                          }
                        }
                        return null
                      })
                      .filter(Boolean) ?? [],
                  secondFlight:
                    tournament.fields.secondFlight
                      ?.map((player) => {
                        if (player && 'fields' in player) {
                          return {
                            playerName: player.fields.playerName,
                            handicapIndex: player.fields.handicapIndex,
                            guest: player.fields.guest,
                            results: player.fields.results?.map((result) => {
                              if (result && 'fields' in result) {
                                return {
                                  ...result.fields,
                                  date: result.fields.date,
                                  index: result.fields.index,
                                  courseHandicap: result.fields.courseHandicap,
                                  gross: result.fields.gross,
                                  net: result.fields.net,
                                  course: result.fields.course,
                                  longDrive: result.fields.longDrive,
                                  putts: result.fields.putts,
                                  closestTo: result.fields.closestTo,
                                }
                              }
                            }),
                            yearlyStats: player.fields.yearlyStats?.map((stats) => {
                              if (stats && 'fields' in stats) {
                                return {
                                  ...stats.fields,
                                  year: stats.fields.year,
                                  gross: stats.fields.gross,
                                  net: stats.fields.net,
                                }
                              }
                            }),
                          }
                        }
                        return null
                      })
                      .filter(Boolean) ?? [],
                },
              ],
            },
          }
        }

        return null
      })
    })
    .filter(Boolean)

  return pages
}

const {
  course,
  courseImage,
  summary,
  address,
  coursePar,
  tournaments = [],
  courseWebsite,
  courseScorecard,
} = Astro.props

const tournamentYear = tournaments[0]?.date ? new Date(tournaments[0].date).getFullYear() : 'N/A'
const tournamentDate = tournaments[0]?.date

const allResults = [
  ...(tournaments[0]?.firstFlight || []).flatMap((player) => player?.results || []),
  ...(tournaments[0]?.secondFlight || []).flatMap((player) => player?.results || []),
]

const validGross = allResults
  .filter((result) => {
    // Normalize both dates to ISO strings for comparison
    const isSameDate =
      result?.date &&
      !isNaN(new Date(result.date).getTime()) &&
      new Date(result.date).toISOString().split('T')[0] ===
        new Date(tournamentDate).toISOString().split('T')[0]

    return isSameDate && result?.gross !== undefined && result?.gross !== null
  })
  .map((result) => result?.gross ?? null)
  .filter((gross): gross is number => gross !== null && !isNaN(gross))

const validPutts = allResults
  .filter((result) => {
    // Normalize both dates to ISO strings for comparison
    const isSameDate =
      result?.date &&
      !isNaN(new Date(result.date).getTime()) &&
      new Date(result.date).toISOString().split('T')[0] ===
        new Date(tournamentDate).toISOString().split('T')[0]

    return isSameDate && result?.putts !== undefined && result?.putts !== null
  })
  .map((result) => result?.putts ?? null)
  .filter((putts): putts is number => putts !== null && !isNaN(putts))

const lowestGrossOverall = validGross.length > 0 ? Math.min(...validGross) : null
const lowestPuttsOverall = validPutts.length > 0 ? Math.min(...validPutts) : null

console.log('Lowest Putts Overall for Current Tournament:', lowestPuttsOverall)

const flights = [
  { title: 'First Flight', data: tournaments[0]?.firstFlight || [] },
  { title: 'Second Flight', data: tournaments[0]?.secondFlight || [] },
]
---

<Layout
  title={`${tournamentYear} Tournament at ${course}  | UCSD Casual Golf Club`}
  description={`Explore the ${tournamentYear} tournament at ${course}. View details, results, and more.`}
>
  <Hero
    course={course}
    courseImage={courseImage}
    subHeadline={tournaments[0]?.clubChampionship && 'Club Championship'}
  />
  <section class={commonStyles.subPageWrapper}>
    <div class={styles.tournamentWrapper}>
      <div class={styles.tournamentLeftCol}>
        {address && <Map longitude={address.lon} latitude={address.lat} />}
        {
          summary !== undefined && (
            <div class={styles.summary}>
              <RichText richText={summary} />
            </div>
          )
        }
        {
          flights.map(
            (flight) =>
              flight.data.length > 0 && (
                <FlightCard
                  title={flight.title}
                  currentCourse={course}
                  tournamentDate={tournamentDate}
                  courseChampionship={tournaments[0]?.clubChampionship}
                  lowestGrossOverall={lowestGrossOverall}
                  lowestPuttsOverall={lowestPuttsOverall}
                  flight={flight.data.map((player) => ({
                    playerName: player?.playerName,
                    handicapIndex: player?.handicapIndex,
                    guest: player?.guest ? [player.guest[0]] : undefined,
                    results: player?.results?.map((result) => ({
                      index: result?.index,
                      date: result?.date,
                      gross: result?.gross,
                      courseHandicap: result?.courseHandicap,
                      net: result?.net,
                      course: result?.course,
                      longDrive: result?.longDrive,
                      putts: result?.putts,
                      closestTo: result?.closestTo,
                    })),
                    yearlyStats: player?.yearlyStats?.map((stats) => ({
                      year: stats?.year,
                      gross: stats?.gross,
                      net: stats?.net,
                    })),
                  }))}
                />
              )
          )
        }
      </div>
      <div class={styles.tournamentRightCol}>
        <MiniCard
          title="Details"
          isCoursePage
          label="Course Website"
          course={course}
          courseWebsite={courseWebsite}
          type={tournaments[0]?.type}
          tournamentNotes={tournaments[0]?.tournamentNotes}
          prices={tournaments[0]?.prices}
          date={tournaments[0]?.date}
          players={tournaments[0]?.players}
          inclusions={tournaments[0]?.inclusions}
          results={tournaments[0]?.results}
        />
        {
          tournaments[0]?.tees !== undefined && (
            <CourseInfo coursePar={coursePar} tees={tournaments[0]?.tees} />
          )
        }
      </div>
    </div>
    <Scorecard courseScorecard={courseScorecard} />
  </section>
</Layout>
