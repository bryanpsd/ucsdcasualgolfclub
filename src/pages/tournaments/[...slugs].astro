---
import { contentfulClient } from "../../lib/contentful";
import { subPageWrapper } from "~styles/common.css";
import Layout from "../../layouts/Layout.astro";
import { format } from "date-fns";
import type {
  TypeCourseSkeleton,
  TypeCourseProps,
} from "~types/contentful/TypeCourse";
import { MiniCard } from "~components/Course/MiniCard";
import { Map } from "~components/Course/Map";

import * as styles from "./_style/tournament.css";
import { RichText } from "~components/RichText";
import FlightCard from "./_components/FlightCard/FlightCard.astro";
import { Hero } from "~components/Hero";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<TypeCourseSkeleton>({
    content_type: "course",
    include: 3, // Ensure linked entries like firstFlight are resolved
  });

  const pages = entries.items
    .flatMap((item) => {
      return item.fields.tournaments?.map((tournament) => {
        if (tournament && "fields" in tournament && tournament.fields.date) {
          const year = new Date(tournament.fields.date).getFullYear(); // Extract year from tournament date

          return {
            params: {
              slugs: `/${year}/${item.fields.slug}`, // Combine "tournament", year, and course slug
            },
            props: {
              ...item.fields,
              address: item.fields.address,
              summary: item.fields.summary,
              courseWebsite: item.fields.courseSite,
              courseImage:
                item.fields.courseImage && "fields" in item.fields.courseImage
                  ? (item.fields.courseImage.fields.file?.url ?? "")
                  : undefined,
              tournaments: [
                {
                  price: tournament.fields.price ?? "N/A", // Include price
                  date: tournament.fields.date ?? "N/A", // Include date
                  players: tournament.fields.players ?? "N/A", // Include players
                  amenities: tournament.fields.amenities ?? [], // Include amenities
                  firstFlight:
                    tournament.fields.firstFlight
                      ?.map((player) => {
                        if (player && "fields" in player) {
                          return {
                            playerName: player.fields.playerName,
                            handicapIndex: player.fields.handicapIndex,
                            guest: player.fields.guest,
                            results: player.fields.results?.map((result) => {
                              if (result && "fields" in result) {
                                return {
                                  ...result.fields,
                                  courseHandicap: result.fields.courseHandicap,
                                  gross: result.fields.gross,
                                  net: result.fields.net,
                                  course: result.fields.course,
                                  longDrive: result.fields.longDrive,
                                  putts: result.fields.putts,
                                  closestTo: result.fields.closestTo,
                                };
                              }
                            }),
                          };
                        }
                        return null;
                      })
                      .filter(Boolean) ?? [],
                  secondFlight:
                    tournament.fields.secondFlight
                      ?.map((player) => {
                        if (player && "fields" in player) {
                          return {
                            playerName: player.fields.playerName,
                            handicapIndex: player.fields.handicapIndex,
                            guest: player.fields.guest,
                            results: player.fields.results?.map((result) => {
                              if (result && "fields" in result) {
                                return {
                                  ...result.fields,
                                  courseHandicap: result.fields.courseHandicap,
                                  gross: result.fields.gross,
                                  net: result.fields.net,
                                  course: result.fields.course,
                                  longDrive: result.fields.longDrive,
                                  putts: result.fields.putts,
                                  closestTo: result.fields.closestTo,
                                };
                              }
                            }),
                          };
                        }
                        return null;
                      })
                      .filter(Boolean) ?? [],
                },
              ],
            },
          };
        }

        return null;
      });
    })
    .filter(Boolean); // Remove null values

  return pages; // Return an array of paths
}

const {
  course,
  courseImage,
  summary,
  address,
  tournaments = [],
  courseWebsite,
} = Astro.props;

console.log(tournaments[0]);
---

<Layout>
  <Hero course={course} courseImage={courseImage} />
  <section class={subPageWrapper}>
    <div class={styles.tournamentWrapper}>
      <div class={styles.tournamentLeftCol}>
        {
          address?.lon !== undefined && address.lat !== undefined ? (
            <Map longitude={address.lon} latitude={address.lat} />
          ) : (
            <p>Location data is unavailable.</p>
          )
        }
        {summary !== undefined && <RichText richText={summary} />}
        {
          tournaments[0]?.firstFlight?.length > 0 && (
            <FlightCard
              title="First Flight"
              currentCourse={course}
              flight={tournaments[0]?.firstFlight?.map((player) => ({
                playerName: player?.playerName,
                handicapIndex: player?.handicapIndex,
                guest: player?.guest ? [player.guest[0]] : undefined,
                results: player?.results?.map((result) => ({
                  gross: result?.gross,
                  courseHandicap: result?.courseHandicap,
                  net: result?.net,
                  course: result?.course,
                  longDrive: result?.longDrive,
                  putts: result?.putts,
                  closestTo: result?.closestTo,
                })),
              }))}
            />
          )
        }
        {
          tournaments[0]?.secondFlight?.length > 0 && (
            <FlightCard
              title="Second Flight"
              currentCourse={course}
              flight={tournaments[0]?.secondFlight?.map((player) => ({
                playerName: player?.playerName,
                handicapIndex: player?.handicapIndex,
                guest: player?.guest ? [player.guest[0]] : undefined,
                results: player?.results?.map((result) => ({
                  gross: result?.gross,
                  courseHandicap: result?.courseHandicap,
                  net: result?.net,
                  course: result?.course,
                  longDrive: result?.longDrive,
                  putts: result?.putts,
                  closestTo: result?.closestTo,
                })),
              }))}
            />
          )
        }
      </div>
      <div class={styles.tournamentRightCol}>
        <MiniCard
          title="Information"
          isCoursePage
          label="Course Website"
          course={course}
          courseWebsite={courseWebsite}
          price={tournaments[0]?.price}
          date={tournaments[0]?.date}
          players={tournaments[0]?.players}
          amenities={tournaments[0]?.amenities}
        />
      </div>
    </div>
  </section>
</Layout>
