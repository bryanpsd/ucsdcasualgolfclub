---
import { ResponsiveHeadline } from '~components/ResponsiveHeadline'
import { Table } from '~components/Table'
import * as styles from './FlightCard.css'

interface FlightCardProps {
  courseChampionship?: boolean
  title: string
  flight: Array<{
    playerName: string
    handicapIndex?: number
    guest?: string[]
    results?: Array<{
      gross?: number
      date?: string
      courseHandicap?: number
      index?: number
      net?: number
      course?: { fields: { course: string } }
      longDrive?: string
      putts?: number
      closestTo?: string[]
    }>
    yearlyStats?: Array<{
      year?: number
      gross?: number
      net?: number
    }>
  }>
  currentCourse: string
  lowestGrossOverall?: number
}

const { title, flight, currentCourse, lowestGrossOverall, courseChampionship } =
  Astro.props as FlightCardProps

const hasResultsForCurrentCourse = flight.some((player) =>
  player.results?.some((result) => result.course?.fields.course === currentCourse)
)

const lowestYearlyGross = Math.min(
  ...flight
    .flatMap((player) => player.yearlyStats?.map((stats) => stats.gross) || [])
    .filter((gross) => gross !== undefined && gross !== null)
)

const lowestYearlyNet = Math.min(
  ...flight
    .flatMap((player) => player.yearlyStats?.map((stats) => stats.net) || [])
    .filter((net) => net !== undefined && net !== null)
)

const tableHeaders = [
  'Player',
  ...(hasResultsForCurrentCourse ? [] : ['Index']),
  ...(hasResultsForCurrentCourse
    ? ['Index', 'Gross', 'Course Handicap', 'Net', 'Putts', 'Closest To', 'Long Drive']
    : []),
  ...(courseChampionship ? ['Final Gross', 'Final Net'] : []),
]

const getYearFromDate = (date?: string) => (date ? new Date(date).getFullYear() : undefined)

const filteredResults = flight.map((player) => ({
  ...player,
  results: player.results?.filter((result) => result.course?.fields.course === currentCourse),
}))
---

<div class={styles.flightCardWrapper}>
  <ResponsiveHeadline id="results-link" size={1} as="h2">
    {title}
  </ResponsiveHeadline>
  <div style="overflow-x: auto;">
    <Table
      client:load
      thead={tableHeaders}
      tbody={filteredResults.flatMap((player) => {
        if (!player.results || player.results.length === 0) {
          return []
        }

        const isLowestGrossOverall = player.results?.[0]?.gross === lowestGrossOverall

        const lowestNet = Math.min(
          ...filteredResults
            .flatMap((p) => p.results?.map((result) => result.net) || [])
            .filter((net) => net !== undefined && net !== null)
        )

        const lowestPutts = Math.min(
          ...filteredResults
            .flatMap((p) => p.results?.map((result) => result.putts) || [])
            .filter((putts) => putts !== undefined && putts !== null)
        )

        const isLowestNet = player.results?.[0]?.net === lowestNet
        const isLowestPutts = player.results?.[0]?.putts === lowestPutts
        const hasLongDrive = player.results?.[0]?.longDrive !== undefined
        const hasClosestTo = player.results?.[0]?.closestTo !== undefined

        return player.results.map((result) => {
          const resultYear = getYearFromDate(result.date)

          // Log resultYear and yearlyStats for debugging
          console.log('Result Year:', resultYear)
          player.yearlyStats?.forEach((stats) => {
            console.log('YearlyStats Year:', stats.year)
          })

          // Find the matching yearlyStats entry for the result year
          const statsForYear = player.yearlyStats?.find((stats) => stats.year === resultYear)

          // Log statsForYear for debugging
          console.log('Matching YearlyStats:', statsForYear)

          const isLowestYearlyGross =
            courseChampionship && statsForYear?.gross === lowestYearlyGross
          const isLowestYearlyNet = courseChampionship && statsForYear?.net === lowestYearlyNet

          return [
            player.guest?.includes('Yes')
              ? `${player.playerName} (Guest)`
              : player.playerName || 'Unknown',

            String(result.index ?? 'NH'),
            {
              value: String(result.gross ?? ''),
              className: isLowestGrossOverall ? styles.highlighted : undefined,
            },
            String(result.courseHandicap ?? ''),

            {
              value: String(result.net ?? ''),
              className: isLowestNet ? styles.highlighted : undefined,
            },
            {
              value: String(result.putts ?? ''),
              className: isLowestPutts ? styles.highlighted : undefined,
            },
            {
              value: String(result.closestTo ?? ''),
              className: hasClosestTo ? styles.highlighted : undefined,
            },
            {
              value: String(result.longDrive ?? ''),
              className: hasLongDrive ? styles.highlighted : undefined,
            },
            ...(courseChampionship
              ? [
                  {
                    value:
                      statsForYear?.gross !== undefined
                        ? statsForYear.gross > 0
                          ? `+${statsForYear.gross}`
                          : statsForYear.gross
                        : undefined,
                    className: isLowestYearlyGross ? styles.highlighted : undefined,
                  },
                  {
                    value:
                      statsForYear?.net !== undefined
                        ? statsForYear.net > 0
                          ? `+${statsForYear.net}`
                          : statsForYear.net
                        : undefined,
                    className: isLowestYearlyNet ? styles.highlighted : undefined,
                  },
                ]
              : []),
          ]
        })
      })}
    />
  </div>
</div>
