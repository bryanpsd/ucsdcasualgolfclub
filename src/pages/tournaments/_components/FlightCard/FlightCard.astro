---
import { ResponsiveHeadline } from '~components/ResponsiveHeadline'
import { Table } from '~components/Table'
import * as styles from './FlightCard.css'

interface FlightCardProps {
  title: string
  flight: Array<{
    playerName: string
    handicapIndex?: number
    guest?: string[]
    results?: Array<{
      gross?: number
      courseHandicap?: number
      index?: number
      net?: number
      course?: { fields: { course: string } }
      longDrive?: string
      putts?: number
      closestTo?: string[]
      date?: string
    }>
  }>
  currentCourse: string
  tournamentDate: string
  lowestGrossOverall?: number
}

const { title, flight, currentCourse, tournamentDate, lowestGrossOverall } = Astro.props as FlightCardProps

const getYearFromDate = (date?: string) => (date ? new Date(date).getFullYear() : undefined)

const tournamentYear = getYearFromDate(tournamentDate)

const filteredResults = flight.map((player) => ({
  ...player,
  results: player.results?.filter((result) => {
    const resultYear = getYearFromDate(result.date)
    const isSameYear = resultYear === tournamentYear
    const isSameCourse = result.course?.fields.course === currentCourse

    // Debugging: Log result details
    console.log('Result:', result)
    console.log('Result Year:', resultYear, 'Is Same Year:', isSameYear, 'Is Same Course:', isSameCourse)

    return isSameYear && isSameCourse
  }),
}))

console.log('Filtered Results:', filteredResults)

const hasResultsForCurrentCourse = filteredResults.some((player) =>
  player.results?.some((result) => result.course?.fields.course === currentCourse)
)
const tableHeaders = [
  'Player',
  ...(hasResultsForCurrentCourse ? [] : ['Index']),
  ...(hasResultsForCurrentCourse
    ? ['Index', 'Gross', 'Course Handicap', 'Net', 'Putts', 'Closest To', 'Long Drive']
    : []),
]

---

<div class={styles.flightCardWrapper}>
  <ResponsiveHeadline id="results-link" size={1} as="h2">
    {title}
  </ResponsiveHeadline>
  <div style="overflow-x: auto;">
    <Table
      client:load
      thead={tableHeaders}
      tbody={filteredResults.map((player) => {
        const isLowestGrossOverall = player.results?.[0]?.gross === lowestGrossOverall

        const lowestNet = Math.min(
          ...filteredResults
            .flatMap((p) => p.results?.map((result) => result.net) || [])
            .filter((net) => net !== undefined && net !== null)
        )

        const lowestPutts = Math.min(
          ...filteredResults
            .flatMap((p) => p.results?.map((result) => result.putts) || [])
            .filter((putts) => putts !== undefined && putts !== null)
        )

        const isLowestNet = player.results?.[0]?.net === lowestNet
        const isLowestPutts = player.results?.[0]?.putts === lowestPutts
        const hasLongDrive = player.results?.[0]?.longDrive !== undefined
        const hasClosestTo = player.results?.[0]?.closestTo !== undefined

        if (!player.results || player.results.length === 0) {
          return [
            player.guest?.includes('Yes')
              ? `${player.playerName} (Guest)`
              : player.playerName || 'Unknown',
            player.handicapIndex !== undefined ? String(player.handicapIndex) : 'NH',
          ]
        } else {
          return [
            player.guest?.includes('Yes')
              ? `${player.playerName} (Guest)`
              : player.playerName || 'Unknown',

            String(player.results?.[0]?.index ?? 'NH'),
            {
              value: String(player.results?.[0]?.gross ?? ''),
              className: isLowestGrossOverall ? styles.highlighted : undefined,
            },
            String(player.results?.[0]?.courseHandicap ?? ''),

            {
              value: String(player.results?.[0]?.net ?? ''),
              className: isLowestNet ? styles.highlighted : undefined,
            },
            {
              value: String(player.results?.[0]?.putts ?? ''),
              className: isLowestPutts ? styles.highlighted : undefined,
            },
            {
              value: String(player.results?.[0]?.closestTo ?? ''),
              className: hasClosestTo ? styles.highlighted : undefined,
            },
            {
              value: String(player.results?.[0]?.longDrive ?? ''),
              className: hasLongDrive ? styles.highlighted : undefined,
            },
          ]
        }
      })}
    />
  </div>
</div>
