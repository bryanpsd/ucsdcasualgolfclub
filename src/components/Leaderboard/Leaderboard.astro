---
import { format } from 'date-fns'
import { Table } from '~components/Table'
import { contentfulClient } from '~services/contentful/contentful'

import type { TypeLeadersSkeleton } from '~types/contentful'

const { gross, net, firstFlight, secondFlight } = Astro.props

const entries = await contentfulClient.getEntries<TypeLeadersSkeleton>({
  content_type: 'leaders',
  limit: 30,
  order: (gross && 'fields.gross') || (net && 'fields.net'),
})

const lastUpdatedDate = entries.items.reduce((latest, item) => {
  const updatedAt = new Date(item.sys.updatedAt).getTime()
  return updatedAt > latest ? updatedAt : latest
}, 0)
---

<Table
  client:load
  thead={gross
    ? ['Gross Leaders']
    : net && firstFlight
      ? ['Net Leaders First Flight']
      : ['Net Leaders Second Flight']}
  colSpan={2}
  tbody={entries.items
    .filter((item) => item.fields.onCurrentRoster)
    .map((item) => {
      if (gross && item.fields.roundsCheck && item.fields.gross !== undefined) {
        return [item.fields.playerName, item.fields.gross]
      } else if (
        firstFlight &&
        net &&
        item.fields.net !== undefined &&
        item.fields.roundsCheck &&
        item.fields.flight === 'First Flight'
      ) {
        return [item.fields.playerName, item.fields.net]
      } else if (
        secondFlight &&
        net &&
        item.fields.net !== undefined &&
        item.fields.roundsCheck &&
        item.fields.flight === 'Second Flight'
      ) {
        return [item.fields.playerName, item.fields.net]
      }
    })
    .filter((row) => row !== undefined) as string[][]}
  tfoot={[`Last updated: ${format(new Date(lastUpdatedDate), 'M/d/yy')}`]}
/>
