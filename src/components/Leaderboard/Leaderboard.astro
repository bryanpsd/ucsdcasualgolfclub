---
import { contentfulClient } from '~lib/contentful';
import type { TypeLeadersSkeleton } from '../../types/contentful';
import { format } from 'date-fns';
import { Table } from '~components/Table';

const { gross, net, firstFlight, secondFlight } = Astro.props;

const entries = await contentfulClient.getEntries<TypeLeadersSkeleton>({
  content_type: 'leaders',
  limit: 30,
  order: (gross && 'fields.gross') || (net && 'fields.net'),
});

const lastUpdatedDate =
  entries.items.find((item) => item.sys.id === 'lastUpdated')?.sys.updatedAt ??
  new Date().toISOString();
---

<Table
  thead={gross
    ? ['Gross Leaders']
    : net && firstFlight
      ? ['Net Leaders 1st Flight']
      : ['Net Leaders 2nd Flight']}
  colSpan={2}
  tbody={entries.items
    .map((item) => {
      if (gross && item.fields.roundsCheck && item.fields.gross !== undefined) {
        return [item.fields.playerName, item.fields.gross];
      } else if (
        firstFlight &&
        net &&
        item.fields.net !== undefined &&
        item.fields.roundsCheck &&
        item.fields.flight === '1st Flight'
      ) {
        return [item.fields.playerName, item.fields.net];
      } else if (
        secondFlight &&
        net &&
        item.fields.net !== undefined &&
        item.fields.roundsCheck &&
        item.fields.flight === '2nd Flight'
      ) {
        return [item.fields.playerName, item.fields.net];
      }
    })
    .filter((row) => row !== undefined) as string[][]}
  tfoot={[`last updated ${format(new Date(lastUpdatedDate), 'M/d/yy')}`]}
/>
