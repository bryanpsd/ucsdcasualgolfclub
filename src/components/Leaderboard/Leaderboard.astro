---
import { contentfulClient } from '~lib/contentful';
import type { TypeLeadersSkeleton } from '../../types/contentful';
import { format } from 'date-fns';
import * as styles from '../../styles/common.css';

const { gross, net, firstFlight, secondFlight } = Astro.props;

const entries = await contentfulClient.getEntries<TypeLeadersSkeleton>({
  content_type: 'leaders',
  limit: 30,
  order: (gross && 'fields.gross') || (net && 'fields.net'),
});

const lastUpdatedDate =
  entries.items.find((item) => item.sys.id === 'lastUpdated')?.sys.updatedAt ??
  new Date().toISOString();
---

<table class={styles.table}>
  <thead class={styles.thead}>
    <tr>
      {
        gross && (
          <th colspan="2" class={styles.th}>
            Gross Leaders
          </th>
        )
      }
      {
        net && (
          <th colspan="2" class={styles.th}>
            Net Leaders {firstFlight ? '"1st Flight"' : '"2nd Flight"'}
          </th>
        )
      }
    </tr>
  </thead>
  <tbody>
    {
      entries.items.map((item) => {
        {
          if (
            gross &&
            item.fields.roundsCheck &&
            item.fields.gross !== undefined
          ) {
            return (
              <tr class={styles.tr}>
                <th scope="row" class={styles.th}>
                  {item.fields.playerName}
                </th>
                <td class={styles.td}>{item.fields.gross}</td>
              </tr>
            );
          } else if (
            firstFlight &&
            net &&
            item.fields.net !== undefined &&
            item.fields.roundsCheck &&
            item.fields.flight === '1st Flight'
          ) {
            return (
              <tr class={styles.tr}>
                <th scope="row" class={styles.th}>
                  {item.fields.playerName}
                </th>
                <td class={styles.td}>{item.fields.net}</td>
              </tr>
            );
          } else if (
            secondFlight &&
            net &&
            item.fields.net !== undefined &&
            item.fields.roundsCheck &&
            item.fields.flight === '2nd Flight'
          ) {
            return (
              <tr class={styles.tr}>
                <th scope="row" class={styles.th}>
                  {item.fields.playerName}
                </th>
                <td class={styles.td}>{item.fields.net}</td>
              </tr>
            );
          }
        }
      })
    }
  </tbody>
  <tfoot class={styles.tfoot}>
    <tr>
      <th colspan="2" class={styles.th}>
        last updated {format(new Date(lastUpdatedDate), 'M/d/yy')}
      </th>
    </tr>
  </tfoot>
</table>
